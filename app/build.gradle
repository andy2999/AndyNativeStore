apply plugin: 'com.android.application' // 表示此Model 是一个application程序
//apply plugin: 'com.android.library' // 表示此Model 是一个library库
//apply from: "../../node_modules/react-native/react.gradle"
def enableSeparateBuildPerCPUArchitecture = true
def enableProguardInReleaseBuilds = false

android {
    //指定的编译SDK以及编辑工具版本
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    //默认的全局配置，也就是说这里边配置的下面的 buildTypes 中也将自动继承了
    defaultConfig {
        applicationId "com.andy.collect"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
       /* ndk {// 设置支持的SO 库构架
            abiFilters 'armeabi', 'armeabi-v7a'//, 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64'
        }*/
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "armeabi"
        }
    }

    //apk签名：这个可以不用自己创建，你可以点击 build/generate signed apk，
    //在其中选择你的文件或者创建签名文件，设置密码等等，然后选择记住密码，然后就会看见有这个配置了
    signingConfigs {
        release {
            storeFile file("D://workspace/RN/demos/AndyHeProject01/my-release-key.keystore")
            storePassword "andyhe"
            keyAlias "my-key-alias"
            keyPassword "andyhe"
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [app_name: "AndyNaRN.dbg"]
            versionNameSuffix '.dbg'
            applicationIdSuffix '.dbg'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            manifestPlaceholders = [app_name: "AndyNaRN"]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    //Java 的版本配置
    compileOptions {
    }

    /*sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs'] //引用 *.so 文件的时候使用
        }

        lintOptions {
            abortOnError false //lint检查开关
        }

        //产品发布风格配置
        productFlavors {
            flavor1 {
                 packageName='com.example.qiujuer.application1'
                 manifest.srcFile 'exampleapk/AndroidManifest1.xml'*//**//*
            }

            flavor2 {
                packageName='com.example.qiujuer.application2'
                manifest.srcFile 'exampleapk/AndroidManifest2.xml'
            }
        }
    }*/

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "armeabi": 2]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

//解决RN集成后运行项目报错问题：Error:Conflict with dependency 'com.google.code.findbugs:jsr305'. Resolved versions for app (3.0.0) and test app (2.0.1) differ
configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.0'
}

//应用 Bugtags 插件
//apply plugin: 'com.bugtags.library.plugin'

//Bugtags 插件配置
/*bugtags {
    //自动上传符号表功能配置，如果需要根据 build varint 配置，请参考插件详细使用说明
    appKey "14f06f1dd7dd320b1942436d7109babf"  //这里是你的 appKey
    appSecret "79d1ce072d08cd55728420a201ecafad"    //这里是你的 appSecret，管理员在设置页可以查看
    mappingUploadEnabled true
    //网络跟踪功能配置(企业版)
    trackingNetworkEnabled true
}*/

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar']) //本地依赖,编译时依赖 libs 文件夹下的所有 jar 文件
    compile project(':andylib') //依赖一个本项目中 名称为 andylib 的 model 库
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
//    compile 'com.alibaba:fastjson:1.2.11'
//    compile 'com.bugtags.library:bugtags-lib:latest.integration'
    compile 'com.facebook.react:react-native:+'

//    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}" //依赖一个远程的库
//    compile "com.android.support:design:${rootProject.ext.supportLibVersion}"

//    testCompile "junit:junit:${rootProject.ext.junitVersion}"
//    androidTestCompile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
//    androidTestCompile "com.android.support.test:runner:${rootProject.ext.testRunnerVersion}"
//    androidTestCompile "com.android.support.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"
}

task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

/*
task clean(type: Exec) {
    ext.lockhunter = '\"D:\\Program Files\\LockHunter\\LockHunter.exe\"'
    def buildDir = file(new File("build"))
    commandLine 'cmd', "$lockhunter", '/delete', '/silent', buildDir
}*/
